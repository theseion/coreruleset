# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set ver.4.0.0-rc1
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
# Copyright (c) 2021-2022 Core Rule Set project. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------

#
# -= Paranoia Level 0 (empty) =- (apply unconditionally)
#



SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 1" "id:942011,phase:1,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 1" "id:942012,phase:2,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 1 (default) =- (apply only when tx.detection_paranoia_level is sufficiently high: 1 or higher)
#

#
# References:
#
# SQL Injection Knowledgebase (via @LightOS) -
# http://websec.ca/kb/sql_injection
#
# SQLi Filter Evasion Cheat Sheet -
# http://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/
#
# SQL Injection Cheat Sheet -
# http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/
#
# SQLMap's Tamper Scripts (for evasions)
# https://svn.sqlmap.org/sqlmap/trunk/sqlmap/tamper/
#

#
# -=[ LibInjection Check ]=-
#
# There is a stricter sibling of this rule at 942101. It covers REQUEST_BASENAME and REQUEST_FILENAME.
#
# Ref: https://libinjection.client9.com/
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* "@detectSQLi" \
    "id:942100,\
    phase:2,\
    block,\
    capture,\
    t:none,t:utf8toUnicode,t:urlDecodeUni,t:removeNulls,\
    msg:'SQL Injection Attack Detected via libinjection',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    multiMatch,\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}'"


#
# -=[ Detect DB Names ]=-
#
# Regular expression generated from util/regexp-assemble/data/942140.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942140
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:database\W*\x28|db_name\W*\x28|information_schema\b|master\.\.sysdatabases\b|msdb\b|msysaccessobjects\b|msysaccessstorage\b|msysaccessxml\b|msysaces\b|msysmodules2\b|msysmodules\b|msysobjects\b|msysqueries\b|msysrelationships\b|mysql\.db\b|northwind\b|pg_catalog\b|pg_toast\b|schema_name\b|schema\W*\x28|sqlite_master\b|sqlite_temp_master\b|sysaux\b|sys\.database_name\b|tempdb\b)" \
    "id:942140,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack: Common DB Names Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ SQL Function Names ]=-
#
# This rule is a less stricter sibling of 942150.
#
# Regexp generated from util/regexp-assemble/data/942151.data using Regexp::Assemble.
# To rebuild the regexp:
#   cd util/regexp-assemble
#   ./regexp-assemble.py 942151
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:s(?:t(?:d(?:dev_(?:sam|po)p)?|r(?:_to_date|cmp)|arts_?with)|q(?:lite_(?:compileoption_(?:used|get)|source_id)|rt)|ub(?:str(?:ing(?:_index)?)?|(?:dat|tim)e)|e(?:ssion_user|c_to_time)|ys(?:tem_user|date)|ha[12]?|oundex|chema|pace|in)|c(?:o(?:n(?:v(?:ert(?:_tz)?)?|cat(?:_ws)?|nection_id)|(?:mpres)?s|ercibility|llation|alesce|t)|ur(?:rent_(?:time(?:stamp)?|date|user)|(?:dat|tim)e)|ha(?:racte)?r_length|iel(?:ing)?|r32)|i(?:s(?:_(?:ipv(?:4(?:_(?:compat|mapped))?|6)|n(?:ot(?:_null)?|ull)|(?:free|used)_lock)|null)|n(?:et(?:6_(?:aton|ntoa)|_(?:aton|ntoa))|s(?:ert|tr)|terval)|fnull)|l(?:o(?:ca(?:ltimestamp|te)|g(?:10|2)|ad_file|wer)|i(?:kel(?:ihood|y)|nestring)|ast_(?:inser_id|day)|e(?:as|f)t|case|trim|pad)|d(?:a(?:t(?:e(?:_(?:format|add|sub)|diff)|abase)|y(?:of(?:month|week|year)|name))|e(?:s_(?:de|en)crypt|grees|code)|count|ump)|u(?:n(?:compress(?:ed_length)?|i(?:x_timestamp|str)|likely|hex)|tc_(?:time(?:stamp)?|date)|uid(?:_short)?|pdatexml|case)|t(?:ime(?:_(?:format|to_sec)|stamp(?:diff|add)?|diff)|o(?:(?:second|day)s|_base64|n?char)|r(?:uncate|im))|m(?:a(?:ke(?:_set|date)|ster_pos_wait)|ulti(?:po(?:lygon|int)|linestring)|i(?:crosecon)?d|onthname|d5)|json(?:b_(?:build_(?:object|array)|(?:prett|arra)y|object)|_(?:build_(?:object|array)|object|array))?|p(?:g_(?:client_encoding|sleep)|o(?:(?:siti|lyg)on|w)|eriod_(?:diff|add)|rocedure_analyse)|g(?:e(?:t_(?:format|lock)|ometrycollection)|(?:r(?:oup_conca|eates)|tid_subse)t)|e(?:x(?:tract(?:value)?|p(?:ort_set)?)|n(?:c(?:rypt|ode)|ds_?with)|lt)|a(?:s(?:cii(?:str)?|in)|es_(?:de|en)crypt|dd(?:dat|tim)e|tan2?)|f(?:rom_(?:unixtime|base64|days)|i(?:el|n)d_in_set|ound_rows)|b(?:i(?:t_(?:length|count|x?or|and)|n_to_num)|enchmark)|r(?:a(?:wtohex|dians|nd)|elease_lock|ow_count|trim|pad)|o(?:(?:ld_passwo)?rd|ct(?:et_length)?)|we(?:ek(?:ofyear|day)|ight_string)|n(?:ame_const|ot_in|ullif)|var(?:_(?:sam|po)p|iance)|qu(?:arter|ote)|hex(?:toraw)?|yearweek|xmltype)\W*\(" \
    "id:942151,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:lowercase,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/1',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ PHPIDS - Converted SQLI Filters ]=-
#
# https://raw.github.com/PHPIDS/PHPIDS/master/lib/IDS/default_filter.xml
#
# The rule 942160 prevents time-based blind SQL injection attempts
# by prohibiting sleep() or benchmark(,) functions:
#
# * The sleep command takes a number of seconds as an argument.
# * The benchmark command executes the specified expression multiple times.
#
# Using a long sleep time or high number of executions, you can create a delay
# with the response from the server.  This allows to determine whether the
# query has been executed or not.  A high response time proves that the SQLi
# worked successfully. It can now be equipped with the real payload.
#
# Therefore this rule does not prevent the attack itself, but blocks an
# attacker from using the standard utils to tinker with blind SQLi.
#
# A positive side effect is that it prevents certain DoS attacks via the directives
# described above.
#
SecRule REQUEST_BASENAME|REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:sleep\(\s*?\d*?\s*?\)|benchmark\(.*?\,.*?\))" \
    "id:942160,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects blind sqli tests using sleep() or benchmark()',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942170.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942170
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:select\s+benchmark\s*?\x28\s*?\x28?\s*?\w+|;\s+benchmark\s*?\x28\s*?\x28?\s*?\w+|select\s+if\s*?\x28\s*?\x28?\s*?\w+|;\s+if\s*?\x28\s*?\x28?\s*?\w+|select\s+sleep\s*?\x28\s*?\x28?\s*?\w+|;\s+sleep\s*?\x28\s*?\x28?\s*?\w+)" \
    "id:942170,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects SQL benchmark and sleep injection attempts including conditional queries',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942190.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942190
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:[\"'`]\s*?!\s*?[\"'`\w]|[\"'`];?\s*?having\b\s*?[^\s]|[\"'`];?\s*?select\b\s*?[^\s]|[\"'`];?\s*?union\b\s*?all\b\s*?[^\s]|[\"'`];?\s*?union\b\s*?distinct\b\s*?[^\s]|[\"'`];?\s*?union\b\s*?select\b\s*?[^\s]|\s*?exec.*?\Wxp_cmdshell|\s*?execute.*?\Wxp_cmdshell|\Wiif\s*?\x28|\bconnection_id\s*?\x28[^\x29]*?|\bcurrent_user\s*?\x28[^\x29]*?|\bdatabase\s*?\x28[^\x29]*?|\bexec\s+master\.|\bexecute\s+master\.|\bfrom\W+information_schema\W|\binto[\s+]+dumpfile\s*?[\"'`]|\binto[\s+]+outfile\s*?[\"'`]|\bschema\s*?\x28[^\x29]*?|\bselect.*?\w?user\x28|\bunion\sselect\s@|\bunion[\w(\s]*?select|\buser\s*?\x28[^\x29]*?)" \
    "id:942190,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:removeCommentsChar,\
    msg:'Detects MSSQL code execution and information gathering attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Magic number crash in PHP strtod from 2011:
# https://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/

SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx ^(?i:-0000023456|4294967295|4294967296|2147483648|2147483647|0000012345|-2147483648|-2147483649|0000023456|2.2250738585072007e-308|2.2250738585072011e-308|1e309)$" \
    "id:942220,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Looking for integer overflow attacks, these are taken from skipfish, except 2.2.2250738585072011e-308 is the \"magic number\" crash',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942230.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942230
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:[\s((?:)?)]case\s+when.*?then|\x29\s*?like\s*?\x28|select.*?having\s*?[^\s]+\s*?[^\w\s]|if\s?\x28\w+\s*?[=<>~])" \
    "id:942230,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects conditional SQL injection attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942240.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942240
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:[\"'`](?:;*?\s*?waitfor\s+(?:delay|time)\s+[\"'`]|;.*?:\s*?goto)|alter\s*?\w+.*?char(?:acter)?\s+set\s+\w+)" \
    "id:942240,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MySQL charset switch and MSSQL DoS attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:merge.*?using\s*?\(|execute\s*?immediate\s*?[\"'`]|match\s*?[\w(),+-]+\s*?against\s*?\()" \
    "id:942250,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MATCH AGAINST, MERGE and EXECUTE IMMEDIATE injections',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)union.*?select.*?from" \
    "id:942270,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Looking for basic sql injection. Common attack string for mysql, oracle and others',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942280.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942280
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:select\s*?pg_sleep|waitfor\s*?delay\s?[\"'`]+\s?\d|;\s*?shutdown\s*?;|;\s*?shutdown\s*?--|;\s*?shutdown\s*?#|;\s*?shutdown\s*?\/\*|;\s*?shutdown\s*?{)" \
    "id:942280,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects Postgres pg_sleep injection, waitfor delay attacks and database shutdown attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942290.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942290
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\[?\$ne\]?|\[?\$eq\]?|\[?\$lt\]?|\[?\$lte\]?|\[?\$ni\]?|\[?\$nin\]?|\[?\$mod\]?|\[?\$all\]?|\[?\$size\]?|\[?\$exists\]?|\[?\$type\]?|\[?\$slice\]?|\[?\$or\]?|\[?\$xor\]?|\[?\$nor\]?|\[?\$div\]?|\[?\$like\]?|\[?\$between\]?|\[?\$and\]?|\[?\$nor\]?|\[?\$not\]?|\[?\$regex\]?|\[?\$text\]?|\[?\$where\]?|\[?\$jsonSchema\]?|\[?\$elemMatch\]?)" \
    "id:942290,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Finds basic MongoDB SQL injection attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942320.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942320
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:d(?:iv\s*?\([+-]?[\d.\s]+,[+-]?[\d.\s]+\)|eclare[^\w]+[@#]\s*?\w+)|create\s+(?:procedure|function)\s*?\w+\s*?\(\s*?\)\s*?-|(?:procedure\s+analyse|lo_(?:impor|ge)t)\s*?\(|;\s*?(?:declare|open)\s+[\w-]+|::(?:(?:tex|in)t|bool)|exec\s*?\(\s*?@)" \
    "id:942320,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MySQL and PostgreSQL stored procedure/function injections',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942350.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942350
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:create\s+function\s.+\sreturns|;\s*?alter\b\s*?[\[(]?\w{2,}|;\s*?create\b\s*?[\[(]?\w{2,}|;\s*?delete\b\s*?[\[(]?\w{2,}|;\s*?desc\b\s*?[\[(]?\w{2,}|;\s*?drop\b\s*?[\[(]?\w{2,}|;\s*?insert\b\s*?[\[(]?\w{2,}|;\s*?load\b\s*?[\[(]?\w{2,}|;\s*?rename\b\s*?[\[(]?\w{2,}|;\s*?select\b\s*?[\[(]?\w{2,}|;\s*?truncate\b\s*?[\[(]?\w{2,}|;\s*?update\b\s*?[\[(]?\w{2,})" \
    "id:942350,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MySQL UDF injection and other data/structure manipulation attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# This rule has two stricter sibling: 942361 and 942362.
# The keywords 'alter' and 'union' led to false positives.
# Therefore they have been moved to PL2 and the keywords have been extended on PL1.
# The original version also had loose word boundaries and context checksum cause further false positives.
# Because fixing those introduced bypass, the original variant was moved to PL2 as 942362.
#
# Sources for SQL ALTER statements:
# MySQL: https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-definition.html
# Oracle/PLSQL: https://docs.oracle.com/apps/search/search.jsp?q=alter&size=60&category=database
# PostgreQSL: https://www.postgresql.org/search/?u=%2Fdocs&q=alter
# MSSQL: https://docs.microsoft.com/en-us/sql/t-sql/statements/statements
# DB2: https://www.ibm.com/support/knowledgecenter/en/search/alter?scope=SSEPGG_9.5.0
#
# Regular expression generated from util/regexp-assemble/data/942360.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942360
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\balter\s+char\b\s*\x28?|\balter\s+group_concat\b\s*\x28?|\balter\s+load_file\b\s*\x28?|\bcreate\s+char\b\s*\x28?|\bcreate\s+group_concat\b\s*\x28?|\bcreate\s+load_file\b\s*\x28?|\bdelete\s+char\b\s*\x28?|\bdelete\s+group_concat\b\s*\x28?|\bdelete\s+load_file\b\s*\x28?|\bdesc\s+char\b\s*\x28?|\bdesc\s+group_concat\b\s*\x28?|\bdesc\s+load_file\b\s*\x28?|\binsert\s+char\b\s*\x28?|\binsert\s+group_concat\b\s*\x28?|\binsert\s+load_file\b\s*\x28?|\bload\s+char\b\s*\x28?|\bload\s+group_concat\b\s*\x28?|\bload\s+load_file\b\s*\x28?|\brename\s+char\b\s*\x28?|\brename\s+group_concat\b\s*\x28?|\brename\s+load_file\b\s*\x28?|\bselect\s+char\b\s*\x28?|\bselect\s+group_concat\b\s*\x28?|\bselect\s+load_file\b\s*\x28?|\btruncate\s+char\b\s*\x28?|\btruncate\s+group_concat\b\s*\x28?|\btruncate\s+load_file\b\s*\x28?|\bupdate\s+char\b\s*\x28?|\bupdate\s+group_concat\b\s*\x28?|\bupdate\s+load_file\b\s*\x28?|\bend\s*?\x29;|[\s(]load_file\s*?\x28|[\"'`]\s+regexp\W|[\"'`\w]\s+as\b\s*[\"'`\w]+\s*\bfrom|^[\W\d]+\s*?create\s+\w+|^[\W\d]+\s*?delete\s+\w+|^[\W\d]+\s*?desc\s+\w+|^[\W\d]+\s*?drop\s+\w+|^[\W\d]+\s*?insert\s+\w+|^[\W\d]+\s*?load\s+\w+|^[\W\d]+\s*?rename\s+\w+|^[\W\d]+\s*?select\s+\w+|^[\W\d]+\s*?truncate\s+\w+|^[\W\d]+\s*?update\s+\w+|^[\W\d]+\s*?alter\s*aggregate\b|^[\W\d]+\s*?alter\s*application\s*role\b|^[\W\d]+\s*?alter\s*assembly\b|^[\W\d]+\s*?alter\s*asymmetric\s*key\b|^[\W\d]+\s*?alter\s*audit\b|^[\W\d]+\s*?alter\s*authorization\b|^[\W\d]+\s*?alter\s*availability\s*group\b|^[\W\d]+\s*?alter\s*broker\s*priority\b|^[\W\d]+\s*?alter\s*bufferpool\b|^[\W\d]+\s*?alter\s*certificate\b|^[\W\d]+\s*?alter\s*cluster\b|^[\W\d]+\s*?alter\s*collation\b|^[\W\d]+\s*?alter\s*column\b|^[\W\d]+\s*?alter\s*conversion\b|^[\W\d]+\s*?alter\s*credential\b|^[\W\d]+\s*?alter\s*cryptographic\s*provider\b|^[\W\d]+\s*?alter\s*database\b|^[\W\d]+\s*?alter\s*default\b|^[\W\d]+\s*?alter\s*dimension\b|^[\W\d]+\s*?alter\s*diskgroup\b|^[\W\d]+\s*?alter\s*domain\b|^[\W\d]+\s*?alter\s*endpoint\b|^[\W\d]+\s*?alter\s*extension\b|^[\W\d]+\s*?alter\s*external\b|^[\W\d]+\s*?alter\s*event\b|^[\W\d]+\s*?alter\s*flashback\b|^[\W\d]+\s*?alter\s*foreign\b|^[\W\d]+\s*?alter\s*fulltext\b|^[\W\d]+\s*?alter\s*function\b|^[\W\d]+\s*?alter\s*hierarchy\b|^[\W\d]+\s*?alter\s*group\b|^[\W\d]+\s*?alter\s*histogram\b|^[\W\d]+\s*?alter\s*index\b|^[\W\d]+\s*?alter\s*indextype\b|^[\W\d]+\s*?alter\s*inmemory\b|^[\W\d]+\s*?alter\s*instance\b|^[\W\d]+\s*?alter\s*java\b|^[\W\d]+\s*?alter\s*language\b|^[\W\d]+\s*?alter\s*large\b|^[\W\d]+\s*?alter\s*library\b|^[\W\d]+\s*?alter\s*lockdown\b|^[\W\d]+\s*?alter\s*logfile\s*group\b|^[\W\d]+\s*?alter\s*login\b|^[\W\d]+\s*?alter\s*mask\b|^[\W\d]+\s*?alter\s*master\s*key\b|^[\W\d]+\s*?alter\s*materialized\b|^[\W\d]+\s*?alter\s*message\s*type\b|^[\W\d]+\s*?alter\s*method\b|^[\W\d]+\s*?alter\s*module\b|^[\W\d]+\s*?alter\s*nickname\b|^[\W\d]+\s*?alter\s*operator\b|^[\W\d]+\s*?alter\s*outline\b|^[\W\d]+\s*?alter\s*package\b|^[\W\d]+\s*?alter\s*partition\b|^[\W\d]+\s*?alter\s*permission\b|^[\W\d]+\s*?alter\s*procedure\b|^[\W\d]+\s*?alter\s*profile\b|^[\W\d]+\s*?alter\s*queue\b|^[\W\d]+\s*?alter\s*remote\b|^[\W\d]+\s*?alter\s*resource\b|^[\W\d]+\s*?alter\s*role\b|^[\W\d]+\s*?alter\s*rollback\b|^[\W\d]+\s*?alter\s*route\b|^[\W\d]+\s*?alter\s*schema\b|^[\W\d]+\s*?alter\s*search\b|^[\W\d]+\s*?alter\s*security\b|^[\W\d]+\s*?alter\s*server\b|^[\W\d]+\s*?alter\s*service\b|^[\W\d]+\s*?alter\s*sequence\b|^[\W\d]+\s*?alter\s*session\b|^[\W\d]+\s*?alter\s*symmetric\s*key\b|^[\W\d]+\s*?alter\s*synonym\b|^[\W\d]+\s*?alter\s*stogroup\b|^[\W\d]+\s*?alter\s*table\b|^[\W\d]+\s*?alter\s*tablespace\b|^[\W\d]+\s*?alter\s*text\b|^[\W\d]+\s*?alter\s*threshold\b|^[\W\d]+\s*?alter\s*trigger\b|^[\W\d]+\s*?alter\s*trusted\b|^[\W\d]+\s*?alter\s*type\b|^[\W\d]+\s*?alter\s*usage\b|^[\W\d]+\s*?alter\s*user\b|^[\W\d]+\s*?alter\s*view\b|^[\W\d]+\s*?alter\s*work\b|^[\W\d]+\s*?alter\s*workload\b|^[\W\d]+\s*?alter\s*wrapper\b|^[\W\d]+\s*?alter\s*xml\s*schema\b|^[\W\d]+\s*?alter\s*xsrobject\b|^[\W\d]+\s*?union\s*all\b|^[\W\d]+\s*?union\s*select\b|^[\W\d]+\s*?union\s*distinct\b)" \
    "id:942360,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects concatenated basic SQL injection and SQLLFI attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# -=[ Detect MySQL in-line comments ]=-
#
# MySQL in-line comments can be used to bypass SQLi detection.
#
# Ref: https://dev.mysql.com/doc/refman/8.0/en/comments.html:
# SELECT /*! STRAIGHT_JOIN */ col1 FROM table1,table2 WHERE ...
# CREATE TABLE t1(a INT, KEY (a)) /*!50110 KEY_BLOCK_SIZE=1024 */;
# SELECT /*+ BKA(t1) */ FROM ... ;
#
# http://localhost/test.php?id=9999+or+{if+length((/*!5000select+username/*!50000from*/user+where+id=1))>0}
#
# The minimal string that triggers this regexp is: /*!*/ or /*+*/.
# The rule 942500 is related to 942440 which catches both /*! and */ independently.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:/\*[!+](?:[\w\s=_\-()]+)?\*/)" \
    "id:942500,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'MySQL in-line comment detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


# This rule catches an authentication bypass via SQL injection that abuses semi-colons to end the SQL query early.
# Any characters after the semi-colon are ignored by some DBMSes (e.g. SQLite).
#
# An example of this would be:
#   email=admin%40juice-sh.op';&password=foo
#
# The server then turns this into:
#   SELECT * FROM users WHERE email='admin@juice-sh.op';' AND password='foo'
#
# Regular expression generated from util/regexp-assemble/data/942540.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942540
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx ^(?:[^\"]*\"|[^']*'|[^`]*`)\s*;" \
    "id:942540,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:replaceComments,\
    msg:'SQL Authentication bypass (split query)',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/1',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 2" "id:942013,phase:1,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 2" "id:942014,phase:2,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 2 =- (apply only when tx.detection_paranoia_level is sufficiently high: 2 or higher)
#


#
# -=[ String Termination/Statement Ending Injection Testing ]=-
#
# Identifies common initial SQLi probing requests where attackers insert/append
# quote characters to the existing normal payload to see how the app/db responds.
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* "@rx (?:^\s*[\"'`;]+|[\"'`]+\s*$)" \
    "id:942110,\
    phase:2,\
    block,\
    capture,\
    t:none,t:utf8toUnicode,t:urlDecodeUni,\
    msg:'SQL Injection Attack: Common Injection Testing Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.warning_anomaly_score}'"


#
# -=[ SQL Operators ]=-
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942120.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942120
#
SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:!=|&&|\|\||>>|<<|>=|<=|<>|<=>|\bxor\b|\bregexp\b|regexp\s+binary|\bisnull\b|\brlike\b|rlike\s+binary|not\s+between\s+0\s+and|not\s+between\s+(?:(?:'[^']*')|(?:\"[^\"]*\"))\s+and\s+(?:(?:'[^']*')|(?:\"[^\"]*\"))|is\s+null|like\s+null|^in[+\s]*\x28[\s\d\"]+[^((?:)?)]*\x29|\Win[+\s]*\x28[\s\d\"]+[^((?:)?)]*\x29|<>\s+binary|\bcollate\W*?(?:U&)?[\"'`]|\bcollate\W+(?:binary|nocase|rtrim)\b|\bcollate\W+\w*?_|\bnotnull\b|like\s+[\w]+\s+escape\b|\bilike\b|[<>=!]{1,2}\s*all\b|\blikelihood\s*\x28|\bunlikely\s*\x28|\blikely\s*\x28)" \
    "id:942120,\
    phase:2,\
    block,\
    capture,\
    t:none,t:utf8toUnicode,t:urlDecodeUni,\
    msg:'SQL Injection Attack: SQL Operator Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# -=[ SQL Tautologies ]=-
#
# Boolean-based SQL injection or tautology attack. Boolean values (True or False) are used to carry out
# this type of SQL injection. The malicious SQL query forces the web application to return a different result de-
# pending on whether the query returns a TRUE or FALSE result.
#
# The original 942130 was split in two rules:
# - 942130 targets tautologies using equalities (e.g. 1 = 1)
# - 942131 targets tautologies using inequalities (e.g. 1 != 2)
#
# We use captures to check for (in)equality in the regexp. So TX.1 will capture the left hand side (LHS) of the inequality,
# and TX.2 will capture the right hand side (RHS) of the logical query.
#
# Regular expression generated from util/regexp-assemble/data/942130.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942130
#
SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\s'\"`()]*?\b([\d\w]+)\b[\s'\"`()]*?(?:=[\s'\"`((?:)?)]*?\b([\d\w]+)\b|<=>[\s'\"`((?:)?)]*?\b([\d\w]+)\b|like[\s'\"`((?:)?)]*?\b([\d\w]+)\b|sounds\s+like[\s'\"`((?:)?)]*?\b([\d\w]+)\b|glob[\s'\"`((?:)?)]*?\b([\d\w]+)\b|rlike[\s'\"`((?:)?)]*?\b([\d\w]+)\b|regexp[\s'\"`((?:)?)]*?\b([\d\w]+)\b)" \
    "id:942130,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:replaceComments,\
    msg:'SQL Injection Attack: SQL Boolean-based attack detected',\
    logdata:'Matched Data: %{TX.0} found within %{TX.942130_MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.942130_lhs=%{TX.1}',\
    setvar:'tx.942130_matched_var_name=%{matched_var_name}',\
    chain"
    SecRule TX:942130_lhs "@streq %{TX.2}" \
        "t:none,\
        setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
        setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Rule Targeting logical inequalities that return TRUE (e.g. 1 != 2)
#
#
# We use captures to check for (in)equality in the regexp. So TX.1 will capture the left hand side (LHS) of the inequality,
# and TX.2 will capture the right hand side (RHS) of the logical query.
#
# Regular expression generated from util/regexp-assemble/data/942131.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942131
#
SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\s'\"`()]*?\b([\d\w]+)\b[\s'\"`()]*?(?:\!=[\s'\"`((?:)?)]*?\b([\d\w]+)\b|<>[\s'\"`((?:)?)]*?\b([\d\w]+)\b|<[\s'\"`((?:)?)]*?\b([\d\w]+)\b|\!<[\s'\"`((?:)?)]*?\b([\d\w]+)\b|>[\s'\"`((?:)?)]*?\b([\d\w]+)\b|\!>[\s'\"`((?:)?)]*?\b([\d\w]+)\b|<=[\s'\"`((?:)?)]*?\b([\d\w]+)\b|>=[\s'\"`((?:)?)]*?\b([\d\w]+)\b|\^[\s'\"`((?:)?)]*?\b([\d\w]+)\b|is\s+not[\s'\"`((?:)?)]*?\b([\d\w]+)\b|not\s+like[\s'\"`((?:)?)]*?\b([\d\w]+)\b|not\s+rlike[\s'\"`((?:)?)]*?\b([\d\w]+)\b|not\s+regexp[\s'\"`((?:)?)]*?\b([\d\w]+)\b)" \
    "id:942131,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:replaceComments,\
    msg:'SQL Injection Attack: SQL Boolean-based attack detected',\
    logdata:'Matched Data: %{TX.0} found within %{TX.942131_MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    multiMatch,\
    setvar:'tx.942131_lhs=%{TX.1}',\
    setvar:'tx.942131_matched_var_name=%{matched_var_name}',\
    chain"
    SecRule TX:942131_lhs "!@streq %{TX.2}" \
        "t:none,\
        setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
        setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# -=[ SQL Function Names ]=-
#
# This rule has one less stricter sibling: 942151.
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942150.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942150
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:s(?:q(?:lite_(?:compileoption_(?:used|get)|source_id|version|offset)|rt)|u(?:bstr(?:ing)?|m)|i(?:nh?|gn)|oundex|econd|leep)|l(?:o(?:ad_extension|g(?:10|2)?|wer(?:pi)?|cal)|ast(?:_insert_rowid)?|ike(?:l(?:ihood|y))?|ength|trim|n)|r(?:a(?:ndom(?:blob)?|dians)|e(?:p(?:lace|eat)|verse)|ight|ound|trim)|c(?:h(?:a(?:r(?:set)?|nges)|r)|o(?:alesce|sh?|unt)|eil(?:ing)?|ast)|t(?:otal(?:_changes)?|r(?:unc|im)|ypeof|anh?|ime)|u(?:n(?:likely|icode)|(?:pp|s)er)|a(?:tan[2h]?|cosh?|sinh?|bs|vg)|d(?:e(?:fault|grees)|a(?:te|y))|p(?:ow(?:er)?|assword|rintf|i)|m(?:in(?:ute)?|o(?:nth|d)|ax)|f(?:loor(?:avg)?|ormat|ield)|i(?:f(?:null)?|n(?:str)?|if)|g(?:roup_concat|lob)|v(?:ersion|alues)|json(?:_[\w]+)?|n(?:ullif|ow)|h(?:our|ex)|zeroblob|quote|week|year|bin|exp)\W*\(" \
    "id:942150,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:lowercase,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# -=[ SQL Authentication Bypasses ]=-
#
# Authentication bypass occurs when the attacker can log in as another user
# without knowing the user's password. The example bypass could look like this:
#
# x' OR 'x
#
# Because of the quantity of different rules they are split into:
# - 942540 PL1
# - 942180 PL2
# - 942260 PL2
# - 942340 PL2
# - 942520 PL2
#   - 942521 PL2
#   - 942522 PL2

# Regular expression generated from util/regexp-assemble/data/942180.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942180
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\d[\"'`]\s+[\"'`]\s+\d|^admin\s*?[\"'`]|(?:\/\*)+[\"'`]+\s?|(?:\/\*)+[\"'`]+\s?--|(?:\/\*)+[\"'`]+\s?#|(?:\/\*)+[\"'`]+\s?/\*|(?:\/\*)+[\"'`]+\s?{|[\"'`]\s*?or[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?xor[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?div[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?like[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?between[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?and[\w\s-]+\s*?[+<>=((?:)?),-]\s*?[\d\"'`]|[\"'`]\s*?[^\w\s]?=\s*?[\"'`]|[\"'`]\W*?[+=]+\W*?[\"'`]|[\"'`]\s*?[!=\|][\d\s!=+-]+.*?[\"'`(].*?$|[\"'`]\s*?[!=\|][\d\s!=]+.*?\d+$|[\"'`]\s*?like\W+[\w\"'`(]|[\"'`\x28\s]\s*?glob\W+[\w\"'`(]|[\"'`]\s*?print\W+[\w\"'`(]|[\"'`]\s*?;|\sis\s*?0\W|where\s[\s\w\.,-]+\s=|[\"'`][<>~]+[\"'`])" \
    "id:942180,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 1/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942200.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942200
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:,.*?[)\da-f\"'`][\"'`][\"'`].*?[\"'`]|,.*?[)\da-f\"'`][\"'`](?:\r?\n)?\z|,.*?[)\da-f\"'`][\"'`][^\"'`]+|\Wselect.+\W*?from|alter\s*?\x28\s*?space\s*?\x28|create\s*?\x28\s*?space\s*?\x28|delete\s*?\x28\s*?space\s*?\x28|desc\s*?\x28\s*?space\s*?\x28|drop\s*?\x28\s*?space\s*?\x28|insert\s*?\x28\s*?space\s*?\x28|load\s*?\x28\s*?space\s*?\x28|rename\s*?\x28\s*?space\s*?\x28|select\s*?\x28\s*?space\s*?\x28|truncate\s*?\x28\s*?space\s*?\x28|update\s*?\x28\s*?space\s*?\x28)" \
    "id:942200,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MySQL comment-/space-obfuscated injections and backtick termination',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942210.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942210
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:@.+=\s*?\x28\s*?select|\d\s*?or\s*?\d+\s*?[\-+]|\d\s*?xor\s*?\d+\s*?[\-+]|\d\s*?div\s*?\d+\s*?[\-+]|\d\s*?like\s*?\d+\s*?[\-+]|\d\s*?between\s*?\d+\s*?[\-+]|\d\s*?and\s*?\d+\s*?[\-+]|\/\w+;?\s+having\W|\/\w+;?\s+and\W|\/\w+;?\s+or\W|\/\w+;?\s+xor\W|\/\w+;?\s+div\W|\/\w+;?\s+like\W|\/\w+;?\s+between\W|\/\w+;?\s+select\W|\d\s+group\s+by.+\x28|;\s*?drop|#\s*?drop|--\s*?drop|;\s*?alter|#\s*?alter|--\s*?alter|;\s*?update\s*?\w{2,}|#\s*?update\s*?\w{2,}|--\s*?update\s*?\w{2,}|;\s*?insert\s*?\w{2,}|#\s*?insert\s*?\w{2,}|--\s*?insert\s*?\w{2,}|[^\w]SET\s*?@\w+|and[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|nand[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|or[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|xor[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|xxor[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|div[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|like[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|between[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|not[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|\|\|[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)]|\&\&[\s(]+\w+[\s)]*?[!=+]+[\s\d]*?[\"'`=((?:)?)])" \
    "id:942210,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects chained SQL injection attempts 1/2',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942260.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942260
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\w\s+like\s+[\"'`]|like\s*?[\"'`]%|[\"'`]\s*?like\W*?[\"'`\d]|[\"'`]\s*?and\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?nand\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?or\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?xor\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?xxor\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?div\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?like\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?between\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?not\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?\|\|\s+[\s\w]+=\s*?\w+\s*?having\s+|[\"'`]\s*?&&\s+[\s\w]+=\s*?\w+\s*?having\s+|select\s+?[\[\]((?:)?)\s\w\.,\"'`-]+from\s+)" \
    "id:942260,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 2/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942300.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942300
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\x29\s*?when\s*?\d+\s*?then|[\"'`]\s*?#|[\"'`]\s*?--|[\"'`]\s*?{|\/\*!\s?\d+|\bbinary\s*?\x28\s*?\d|\bchar\s*?\x28\s*?\d|\bchr\s*?\x28\s*?\d|\band\s+\s*?\w+\x28|\bnand\s+\s*?\w+\x28|\bor\s+\s*?\w+\x28|\bxor\s+\s*?\w+\x28|\bxxor\s+\s*?\w+\x28|\bdiv\s+\s*?\w+\x28|\blike\s+\s*?\w+\x28|\bbetween\s+\s*?\w+\x28|\bnot\s+\s*?\w+\x28|\bregexp\s+\s*?\w+\x28|\brlike\s+\s*?\w+\x28|\|\|\s+\s*?\w+\x28|&&\s+\s*?\w+\x28)" \
    "id:942300,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects MySQL comments, conditions and ch(a)r injections',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942310.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942310
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\x28\s*?select\s*?\w+\s*?\x28|\*\/from|\+\s*?\d+\s*?\+\s*?@|\w[\"'`]\s*?(?:[-+=\|@]+\s+?)+[\d(]|\w[\"'`]\s*?[-+=\|@]+[\d(]|coalesce\s*?\x28|@@\w+\s*?[^\w\s]|\W!+[\"'`]\w|[\"'`];\s*?if|[\"'`];\s*?while|[\"'`];\s*?begin|[\"'`][\s\d]+=\s*?\d|order\s+by\s+if\w*?\s*?\x28|[\s(]+case\d*?\W.+[tw]hen[\s(])" \
    "id:942310,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects chained SQL injection attempts 2/2',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# -=[ SQL Injection Probings ]=-
#
# This is a group of three similar rules aiming to detect SQL injection probings.
#
# 942330 PL 2
# 942370 PL 2
# 942490 PL 3
# Regular expression generated from util/regexp-assemble/data/942330.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942330
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:[\"'`]\s*?or\s*?[\"'`]?\d|[\"'`]\s*?xor\s*?[\"'`]?\d|[\"'`]\s*?div\s*?[\"'`]?\d|[\"'`]\s*?like\s*?[\"'`]?\d|[\"'`]\s*?between\s*?[\"'`]?\d|[\"'`]\s*?and\s*?[\"'`]?\d|\x5cx(?:2[37]|3d)|^.?[\"'`]$|^[\"'`\x5c]*?[\d\"'`]+\s*?and\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?nand\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?or\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?xor\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?xxor\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?div\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?like\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?between\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?not\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?\|\|\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[\d\"'`]+\s*?\&\&\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?and\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?nand\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?or\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?xor\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?xxor\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?div\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?like\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?between\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?not\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?\|\|\s*?[\w\"'`][+&!@((?:)?),.-]|^[\"'`\x5c]*?[^\"'`]+[\"'`]\s*?\&\&\s*?[\w\"'`][+&!@((?:)?),.-]|(?:-]\s*?[\"'`]\s*?\w|[^\w\s]\w+\s*?[)|@\w+\s+and\s*?[\"'`\d]+|@\w+\s+or\s*?[\"'`\d]+|@\w+\s+xor\s*?[\"'`\d]+|@\w+\s+div\s*?[\"'`\d]+|@\w+\s+like\s*?[\"'`\d]+|@\w+\s+between\s*?[\"'`\d]+|@[\w-]+\sand\s*?[^\w\s]|@[\w-]+\sor\s*?[^\w\s]|@[\w-]+\sxor\s*?[^\w\s]|@[\w-]+\sdiv\s*?[^\w\s]|@[\w-]+\slike\s*?[^\w\s]|@[\w-]+\sbetween\s*?[^\w\s]|[^\w\s:]\s*?\d\W+[^\w\s]\s*?[\"'`].|\Winformation_schema|table_name\W)" \
    "id:942330,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects classic SQL injection probings 1/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942340.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942340
#
# Note that part of 942340.data is already optimized, to avoid a
# Regexp::Assemble behaviour, where the regex is not optimized very nicely.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:in\s*?\x28+\s*?select|(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)[\s\w+]+regexp\s*?\x28|(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)[\s\w+]+sounds\s+like\s*?[\"'`]|(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)[\s\w+]+[=\d]+x|[\"'`]\s*?\d\s*?--|[\"'`]\s*?\d\s*?#|[\"'`][\%&<>^=]+\d\s*?=|[\"'`][\%&<>^=]+\d\s*?or|[\"'`][\%&<>^=]+\d\s*?xor|[\"'`][\%&<>^=]+\d\s*?div|[\"'`][\%&<>^=]+\d\s*?like|[\"'`][\%&<>^=]+\d\s*?between|[\"'`][\%&<>^=]+\d\s*?and|[\"'`]\W+[\w+-]+\s*?=\s*?\d\W+[\"'`]|[\"'`]\s*?is\s*?\d.+[\"'`]?\w|[\"'`]\|?[\w-]{3,}[^\w\s.,]+[\"'`]|[\"'`]\s*?is\s*?[\d.]+\s*?\W.*?[\"'`]|\bexcept\s+select\b|\bexcept\s+values\s*?\x28|[\"'`]\s*(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)array\s*\[|[\"'`]\s*(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)[\w]+\s*!?~|[\"'`]\s*(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)[\w]+\s+(?:not\s+)?similar\s+to\s+|[\"'`]\s*(?i:(?:between|x?x?or|n?and|like|div|not)\s+|(?:(?:&&|\)?)\s*)(?:(?:fals|tru)e)\b)" \
    "id:942340,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 3/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# This rule is a stricter sibling of 942360.
# The keywords 'alter' and 'union' led to false positives.
# Therefore they have been moved to PL2 and the keywords have been extended on PL1.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:^[\W\d]+\s*?(?:alter|union)\b)" \
    "id:942361,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL injection based on keyword alter or union',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# This rule is a stricter sibling of 942360.
# The loose word boundaries and light context led to false positives.
# Because the stricter variant does miss quite a few legitimate payloads, the loose version was moved to PL2.
#
# Regular expression generated from util/regexp-assemble/data/942362.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942362
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:alter\s+char\s?\x28?|alter\s+group_concat\s?\x28?|alter\s+load_file\s?\x28?|create\s+char\s?\x28?|create\s+group_concat\s?\x28?|create\s+load_file\s?\x28?|delete\s+char\s?\x28?|delete\s+group_concat\s?\x28?|delete\s+load_file\s?\x28?|desc\s+char\s?\x28?|desc\s+group_concat\s?\x28?|desc\s+load_file\s?\x28?|insert\s+char\s?\x28?|insert\s+group_concat\s?\x28?|insert\s+load_file\s?\x28?|load\s+char\s?\x28?|load\s+group_concat\s?\x28?|load\s+load_file\s?\x28?|rename\s+char\s?\x28?|rename\s+group_concat\s?\x28?|rename\s+load_file\s?\x28?|select\s+char\s?\x28?|select\s+group_concat\s?\x28?|select\s+load_file\s?\x28?|truncate\s+char\s?\x28?|truncate\s+group_concat\s?\x28?|truncate\s+load_file\s?\x28?|update\s+char\s?\x28?|update\s+group_concat\s?\x28?|update\s+load_file\s?\x28?|end\s*?\x29;|[\s(]load_file\s*?\x28|[\"'`]\s+regexp\W|[\d\W]\s+as\b\s*[\"'`\w]+\s*\bfrom|^[\W\d]+\s*?create\s+\w+|^[\W\d]+\s*?delete\b|^[\W\d]+\s*?desc\b|^[\W\d]+\s*?drop\b|^[\W\d]+\s*?insert\b|^[\W\d]+\s*?load\b|^[\W\d]+\s*?rename\b|^[\W\d]+\s*?select\b|^[\W\d]+\s*?truncate\b|^[\W\d]+\s*?update\b|^[\W\d]+\s*?alter\s*aggregate\b|^[\W\d]+\s*?alter\s*application\s*role\b|^[\W\d]+\s*?alter\s*assembly\b|^[\W\d]+\s*?alter\s*asymmetric\s*key\b|^[\W\d]+\s*?alter\s*audit\b|^[\W\d]+\s*?alter\s*authorization\b|^[\W\d]+\s*?alter\s*availability\s*group\b|^[\W\d]+\s*?alter\s*broker\s*priority\b|^[\W\d]+\s*?alter\s*bufferpool\b|^[\W\d]+\s*?alter\s*certificate\b|^[\W\d]+\s*?alter\s*cluster\b|^[\W\d]+\s*?alter\s*collation\b|^[\W\d]+\s*?alter\s*column\b|^[\W\d]+\s*?alter\s*conversion\b|^[\W\d]+\s*?alter\s*credential\b|^[\W\d]+\s*?alter\s*cryptographic\s*provider\b|^[\W\d]+\s*?alter\s*database\b|^[\W\d]+\s*?alter\s*default\b|^[\W\d]+\s*?alter\s*dimension\b|^[\W\d]+\s*?alter\s*diskgroup\b|^[\W\d]+\s*?alter\s*domain\b|^[\W\d]+\s*?alter\s*endpoint\b|^[\W\d]+\s*?alter\s*extension\b|^[\W\d]+\s*?alter\s*external\b|^[\W\d]+\s*?alter\s*event\b|^[\W\d]+\s*?alter\s*flashback\b|^[\W\d]+\s*?alter\s*foreign\b|^[\W\d]+\s*?alter\s*fulltext\b|^[\W\d]+\s*?alter\s*function\b|^[\W\d]+\s*?alter\s*hierarchy\b|^[\W\d]+\s*?alter\s*group\b|^[\W\d]+\s*?alter\s*histogram\b|^[\W\d]+\s*?alter\s*index\b|^[\W\d]+\s*?alter\s*indextype\b|^[\W\d]+\s*?alter\s*inmemory\b|^[\W\d]+\s*?alter\s*instance\b|^[\W\d]+\s*?alter\s*java\b|^[\W\d]+\s*?alter\s*language\b|^[\W\d]+\s*?alter\s*large\b|^[\W\d]+\s*?alter\s*library\b|^[\W\d]+\s*?alter\s*lockdown\b|^[\W\d]+\s*?alter\s*logfile\s*group\b|^[\W\d]+\s*?alter\s*login\b|^[\W\d]+\s*?alter\s*mask\b|^[\W\d]+\s*?alter\s*master\s*key\b|^[\W\d]+\s*?alter\s*materialized\b|^[\W\d]+\s*?alter\s*message\s*type\b|^[\W\d]+\s*?alter\s*method\b|^[\W\d]+\s*?alter\s*module\b|^[\W\d]+\s*?alter\s*nickname\b|^[\W\d]+\s*?alter\s*operator\b|^[\W\d]+\s*?alter\s*outline\b|^[\W\d]+\s*?alter\s*package\b|^[\W\d]+\s*?alter\s*partition\b|^[\W\d]+\s*?alter\s*permission\b|^[\W\d]+\s*?alter\s*procedure\b|^[\W\d]+\s*?alter\s*profile\b|^[\W\d]+\s*?alter\s*queue\b|^[\W\d]+\s*?alter\s*remote\b|^[\W\d]+\s*?alter\s*resource\b|^[\W\d]+\s*?alter\s*role\b|^[\W\d]+\s*?alter\s*rollback\b|^[\W\d]+\s*?alter\s*route\b|^[\W\d]+\s*?alter\s*schema\b|^[\W\d]+\s*?alter\s*search\b|^[\W\d]+\s*?alter\s*security\b|^[\W\d]+\s*?alter\s*server\b|^[\W\d]+\s*?alter\s*service\b|^[\W\d]+\s*?alter\s*sequence\b|^[\W\d]+\s*?alter\s*session\b|^[\W\d]+\s*?alter\s*symmetric\s*key\b|^[\W\d]+\s*?alter\s*synonym\b|^[\W\d]+\s*?alter\s*stogroup\b|^[\W\d]+\s*?alter\s*table\b|^[\W\d]+\s*?alter\s*tablespace\b|^[\W\d]+\s*?alter\s*text\b|^[\W\d]+\s*?alter\s*threshold\b|^[\W\d]+\s*?alter\s*trigger\b|^[\W\d]+\s*?alter\s*trusted\b|^[\W\d]+\s*?alter\s*type\b|^[\W\d]+\s*?alter\s*usage\b|^[\W\d]+\s*?alter\s*user\b|^[\W\d]+\s*?alter\s*view\b|^[\W\d]+\s*?alter\s*work\b|^[\W\d]+\s*?alter\s*workload\b|^[\W\d]+\s*?alter\s*wrapper\b|^[\W\d]+\s*?alter\s*xml\s*schema\b|^[\W\d]+\s*?alter\s*xsrobject\b|^[\W\d]+\s*?union\s*all\b|^[\W\d]+\s*?union\s*select\b|^[\W\d]+\s*?union\s*distinct\b)" \
    "id:942362,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects concatenated basic SQL injection and SQLLFI attempts',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'paranoia-level/2',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# This rule is a sibling of 942330. See that rule for a description and overview.
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942370.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942370
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:[\"'`]\s*?\*.+or\W*?[\"'`]\d|[\"'`]\s*?\*.+xor\W*?[\"'`]\d|[\"'`]\s*?\*.+div\W*?[\"'`]\d|[\"'`]\s*?\*.+like\W*?[\"'`]\d|[\"'`]\s*?\*.+between\W*?[\"'`]\d|[\"'`]\s*?\*.+and\W*?[\"'`]\d|[\"'`]\s*?\*.+id\W*?[\"'`]\d|\^[\"'`]|[\"'`]\s*?[^\w\s?]+\s*?[^\w\s]+\s*?[\"'`]|[\"'`]\s*?[^\w\s]+\s*?[\W\d].*?#|[\"'`]\s*?[^\w\s]+\s*?[\W\d].*?--|[\"'`].*?\*\s*?\d|[\"'`]\s*?or\s[^\d]+[\w-]+.*?\d|[\"'`]\s*?xor\s[^\d]+[\w-]+.*?\d|[\"'`]\s*?div\s[^\d]+[\w-]+.*?\d|[\"'`]\s*?like\s[^\d]+[\w-]+.*?\d|[\"'`]\s*?between\s[^\d]+[\w-]+.*?\d|[\"'`]\s*?and\s[^\d]+[\w-]+.*?\d|[((?:)?)\*<>%+-][\w-]+[^\w\s]+[\"'`][^,])" \
    "id:942370,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects classic SQL injection probings 2/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942380.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942380
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\bhaving\b\s+\d{1,10}\s*?[=<>]|\bhaving\b\s+'[^=]{1,10}'\s*?[=<>]|\bexecute\x28|\bexecute\s{1,5}[\w\.$]{1,5}\s{0,3}|\bhaving\b ?\d{1,10} ?[=<>]+|\bhaving\b ?[\'\"][^=]{1,10}[\'\" ?[=<>]+|\bcreate\s+?table.{0,20}?\x28|\blike\W*?char\W*?\x28|select.*?case|from.*?limit|order\sby|exists\s\sselect|exists\sselect\Sif\s\x28|exists\sselect\Sifnull\s\x28|exists\sselect\Stop|exists\sselect\Sconcat|exists\ssystem\s\x28|exists\s\bhaving\b\s+\d{1,10}|exists\s'[^=]{1,10}'|\bexists\s*?\x28\s*?select\b)" \
    "id:942380,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942390.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942390
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\bor\b\s?\d{1,10}\s?[=<>]+|\bor\b\s?[\'\"][^=]{1,10}[\'\"]\s?[=<>]+|'\s+or\s+.{1,20}[+\-!<>=]|'\s+xor\s+.{1,20}[+\-!<>=]|\bor\b\s+\d{1,10}|\bor\b\s+'[^=]{1,10}'|\bxor\b\s+\d{1,10}|\bxor\b\s+'[^=]{1,10}'|\bor\b\s+\d{1,10}\s*?[=<>]|\bxor\b\s+\d{1,10}\s*?[=<>]|\bor\b\s+'[^=]{1,10}'\s*?[=<>]|\bxor\b\s+'[^=]{1,10}'\s*?[=<>])" \
    "id:942390,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Regular expression generated from util/regexp-assemble/data/942400.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942400
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\band\b\s+\d{1,10}\s*?[=<>]|\band\b\s+'[^=]{1,10}'|\band\b ?\d{1,10} ?[=<>]+|\band\b ?[\'\"][^=]{1,10}[\'\"] ?[=<>]+)" \
    "id:942400,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# The former rule id 942410 was split into three new rules: 942410, 942470, 942480
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from util/regexp-assemble/data/942410.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942410
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:abs|acos|adddate|addtime|aes_decrypt|aes_encrypt|asin|ascii|asciistr|atan|atan2|avg|benchmark|bin|bin_to_num|bit_and|bit_count|bit_length|bit_or|bit_xor|cast|char|character_length|char_length|charset|chr|ciel|cieling|coalesce|coercibility|compress|concat|concat_ws|connection_id|conv|convert|convert_tz|cos|cot|count|cr32|curdate|current_date|current_time|current_timestamp|current_user|curtime|database|date|date_add|datediff|date_format|date_sub|day|dayname|dayofmonth|dayofweek|dayofyear|dcount|decode|default|degrees|des_decrypt|des_encrypt|dump|elt|encode|encrypt|exp|export_set|extract|extractvalue|field|field_in_set|find_in_set|floor|format|found_rows|from_base64|from_days|from_unixtime|get_format|get_lock|greatest|group_concat|hex|hextoraw|hour|if|ifnull|in|inet6_aton|inet6_ntoa|inet_aton|inet_ntoa|insert|instr|interval|is|is_free_lock|is_ipv4|is_ipv4_compat|is_ipv4_mapped|is_ipv6|is_not|is_not_null|isnull|is_null|is_used_lock|last|last_day|last_insert_id|lcase|least|left|length|ln|load_file|local|localtimestamp|locate|log|log10|log2|lower|lpad|ltrim|makedate|make_set|master_pos_wait|max|md5|microsecond|mid|min|minute|mod|month|monthname|name_const|not_in|now|nullif|oct|octet_length|old_password|ord|password|period_add|period_diff|pg_sleep|pi|position|pow|power|procedure_analyse|quarter|quote|radians|rand|rawtohex|rawtonhex|rawtonhextoraw|release_lock|repeat|replace|reverse|right|round|row_count|rpad|rtrim|schema|second|sec_to_time|session_user|sha|sha1|sha2|sign|sin|sleep|soundex|space|sqrt|std|stddev|stddev_pop|stddev_samp|strcmp|str_to_date|subdate|substr|substring|substring_index|subtime|sum|sysdate|system_user|tan|time|timediff|time_format|timestamp|timestampadd|timestampdiff|time_to_sec|to_base64|to_char|to_days|to_nchar|to_seconds|trim|truncate|ucase|uncompress|uncompressed_length|unhex|unix_timestamp|updatexml|upper|user|utc_date|utc_time|utc_timestamp|uuid|uuid_short|values|variance|var_pop|var_samp|version|week|weekday|weekofyear|weight_string|xmltype|year|yearweek)\W*?\(" \
    "id:942410,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# The former rule id 942410 was split into three new rules: 942410, 942470, 942480
#
# Regular expression generated from util/regexp-assemble/data/942470.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942470
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:xp_(?:reg(?:re(?:movemultistring|ad)|delete(?:value|key)|enum(?:value|key)s|addmultistring|write)|(?:servicecontro|cmdshel)l|e(?:xecresultset|numdsn)|ntsec(?:_enumdomains)?|terminate(?:_process)?|availablemedia|loginconfig|filelist|dirtree|makecab)|s(?:p_(?:(?:addextendedpro|sqlexe)c|p(?:assword|repare)|replwritetovarbin|is_srvrolemember|execute(?:sql)?|makewebtask|oacreate|help)|ql_(?:longvarchar|variant))|(?:current_use|n?varcha|tbcreato)r|open(?:owa_util|rowset|query)|autonomous_transaction|db(?:a_users|ms_java)|utl_(?:file|http))" \
    "id:942470,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# The former rule id 942410 was split into three new rules: 942410, 942470, 942480
#
# Regular expression generated from util/regexp-assemble/data/942480.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942480
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\b(?:(?:s(?:elect\b.{1,100}?\b(?:(?:(?:length|count)\b.{1,100}?|.*?\bdump\b.*)\bfrom|to(?:p\b.{1,100}?\bfrom|_(?:numbe|cha)r)|(?:from\b.{1,100}?\bwher|data_typ)e|instr)|ys_context)|in(?:to\b\W*?\b(?:dump|out)file|sert\b\W*?\binto|ner\b\W*?\bjoin)|(?:group\b.*?\bby\b.{1,100}?\bhav|overlay\b\W*?\(.*?\bplac)ing|u(?:nion\b.{1,100}?\bselect|tl_inaddr)|d(?:elete\b\W*?\bfrom|bms_\w+\.)|load\b\W*?\bdata\b.*?\binfile)\b|print\b\W*?\@\@)|(?:;\W*?\b(?:shutdown|drop)|collation\W*?\(a|\@\@version)\b|'(?:s(?:qloledb|a)|msdasql|dbo)')" \
    "id:942480,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Injection Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ctl:auditLogParts=+E,\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# [ SQL Injection Character Anomaly Usage ]
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# This rules attempts to gauge when there is an excessive use of
# meta-characters within a single parameter payload.
#
# Expect a lot of false positives with this rule.
# The most likely false positive instances will be free-form text fields.
# This will make it necessary to disable the rule for certain known parameters.
# The following directive is an example to switch off the rule globally for
# the parameter foo. Place this instruction in your configuration after
# the include directive for the Core Rules Set.
#
# SecRuleUpdateTargetById 942430 "!ARGS:foo"
#

SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){12})" \
    "id:942430,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (12)',\
    logdata:'Matched Data: %{TX.1} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.warning_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}'"


#
# -=[ Detect SQL Comment Sequences ]=-
#
# Example Payloads Detected:
# -------------------------
# OR 1#
# DROP sampletable;--
# admin'--
# DROP/*comment*/sampletable
# DR/**/OP/*bypass deny listing*/sampletable
# SELECT/*avoid-spaces*/password/**/FROM/**/Members
# SELECT /*!32302 1/0, */ 1 FROM tablename
# ‘ or 1=1#
# ‘ or 1=1-- -
# ‘ or 1=1/*
# ' or 1=1;\x00
# 1='1' or-- -
# ' /*!50000or*/1='1
# ' /*!or*/1='1
# 0/**/union/*!50000select*/table_name`foo`/**/
# -------------------------
#
# Regular expression generated from util/regexp-assemble/data/942440.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942440
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?:\/\*!?|\*\/|[';]--|--\s|--[^-]*?-|[^&-]#.*?\s|;?\x00)" \
    "id:942440,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Comment Sequence Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    chain"
    SecRule MATCHED_VARS "!@rx ^ey[A-Z-a-z0-9-_]+[.]ey[A-Z-a-z0-9-_]+[.][A-Z-a-z0-9-_]+$" "t:none,\
        setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}',\
        setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}'"


#
# -=[ SQL Hex Evasion Methods ]=-
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:\b0x[a-f\d]{3,})" \
    "id:942450,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQL Hex Encoding Identified',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# -=[ Detect SQLi bypass: backticks ]=-
#
# Quotes and backticks can be used to bypass SQLi detection.
#
# Example:
# GET http://localhost/test.php?id=9999%20or+{`if`(2=(select+2+from+wp_users+where+user_login='admin'))}
#
# The minimum text between the ticks or backticks must be 2 (if, for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29), the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2,29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "==", together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "=", together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: `if`
#
# The rule 942510 is related to 942110 which catches a single ' or `
#
# The rule 942511 is similar to this rule, but triggers on normal quotes
# ('if'). That rule runs in paranoia level 3 or higher since it is prone to
# false positives in natural text.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?:`(?:(?:[\w\s=_\-+{}()<@]){2,29}|(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)`)" \
    "id:942510,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQLi bypass attempt by ticks or backticks detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# Regular expression generated from util/regexp-assemble/data/942520.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942520
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`]\s*?(?:is\s+not\b|not\s+(?:(?:(?:betwee|i)n|regexp|match|glob|like|null))\b|(?:&<>*\/%=^+-]|[)|(?:div|mod)\b|sounds\s+like\b)" \
    "id:942520,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 4.0/4',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# Complementary rule to PL2 942520 that block and/or-based bypasses.
# It blocks data with odd number of quotes and then (and|or).
#
# The rule uses the expression ^b*a*(b*a*b*a*)* to odd number of a's. It's not
# vulnerable to ReDos as it executes linearly many steps compared to input size.
#
# Regular expression generated from util/regexp-assemble/data/942521.data.
# To update the regular expression run the following shell script
# (consult util/regexp-assemble/README.md for details):
#   util/regexp-assemble/regexp-assemble.py update 942521
#
SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)^(?:[^']*?(?:'[^']*?'[^']*?)*?'\s*(\w+)\b|[^\"]*?(?:\"[^\"]*?\"[^\"]*?)*?\"\s*(\w+)\b|[^`]*?(?:`[^`]*?`[^`]*?)*?`\s*(\w+)\b)" \
    "id:942521,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 4.1/4',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.942521_lhs=%{TX.1}',\
    setvar:'tx.942521_full=%{TX.0}',\
    chain"
    SecRule TX:942521_lhs "@rx ^(?:and|or)$" \
        "t:none,\
        setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
        setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# Complementary rule to PL2 942521 that block escaped quotes followed by (and|or)
#
SecRule ARGS_NAMES|ARGS|XML:/* "@rx ^.*?\x5c['\"`](?:.*?['\"`])?\s*(?:and|or)\b" \
    "id:942522,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects basic SQL authentication bypass attempts 4.1/4',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# This is a sibling of rule 942100 that adds checking of the path.
#
# REQUEST_BASENAME provides the last url segment (slash excluded).
# This segment is the most likely to be used for injections. Stripping out
# the slash permits libinjection to do not consider it as a payload starting
# with not unary arithmetical operators (not a valid SQL command, e.g.
# '/9 union all'). The latter would lead to do not detect malicious payloads.
#
# REQUEST_FILENAME matches SQLi payloads inside (or across) other segments
# of the path. Here, libinjection will detect a true positive only if
# the url leading slash is considered as part of a comment block or part
# of a string (with a quote or double quote after it). In these circumstances,
# previous slashes do not affect libinjection result, making it able to detect
# some SQLi inside the path.
#
SecRule REQUEST_BASENAME|REQUEST_FILENAME "@detectSQLi" \
    "id:942101,\
    phase:1,\
    block,\
    capture,\
    t:none,t:utf8toUnicode,t:urlDecodeUni,t:removeNulls,\
    msg:'SQL Injection Attack Detected via libinjection',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 3" "id:942015,phase:1,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 3" "id:942016,phase:2,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 3 =- (apply only when tx.detection_paranoia_level is sufficiently high: 3 or higher)
#


#
# [ SQL HAVING queries ]
#
# This pattern was split off from rule 942250 due to frequent
# false positives in English text. Testing showed that SQL
# injections with HAVING should be detected by libinjection
# (rule 942100).
#
# This is a stricter sibling of rule 942250.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\W+\d*?\s*?\bhaving\b\s*?[^\s\-]" \
    "id:942251,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects HAVING injections',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"

# This rule is a stricter sibling of 942330. See that rule for a
# description and overview.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx [\"'`][\s\d]*?[^\w\s]\W*?\d\W*?.*?[\"'`\d]" \
    "id:942490,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Detects classic SQL injection probings 3/3',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"

#
# [ SQL Injection Character Anomaly Usage ]
#
# This rule attempts to gauge when there is an excessive use of
# meta-characters within a single parameter payload.
#
# It is similar to 942430, but focuses on Cookies instead of
# GET/POST parameters.
#
# Expect a lot of false positives with this rule.
# The most likely false positive instances will be complex session ids.
# This will make it necessary to disable the rule for certain known cookies.
# The following directive is an example to switch off the rule globally for
# the cookie foo_id. Place this instruction in your configuration after
# the include directive for the Core Rules Set.
#
# SecRuleUpdateTargetById 942420 "!REQUEST_COOKIES:foo_id"
#

SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){8})" \
    "id:942420,\
    phase:1,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Restricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (8)',\
    logdata:'Matched Data: %{TX.1} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.warning_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}'"


#
# This is a stricter sibling of rule 942430.
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#

SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){6})" \
    "id:942431,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (6)',\
    logdata:'Matched Data: %{TX.1} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.warning_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}'"


#
# [ Repetitive Non-Word Characters ]
#
# This rule attempts to identify when multiple (4 or more) non-word characters
# are repeated in sequence.
#
# The pattern may occur in some normal texts, e.g. "foo...." will match.
#
SecRule ARGS "@rx \W{4}" \
    "id:942460,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Meta-Character Anomaly Detection Alert - Repetitive Non-Word Characters',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.warning_anomaly_score}'"


#
# -=[ Detect SQLi bypass: quotes ]=-
#
# Quotes and backticks can be used to bypass SQLi detection.
#
# Example:
# GET http://localhost/test.php?id=9999%20or+{`if`(2=(select+2+from+wp_users+where+user_login='admin'))}
#
# The minimum text between the ticks or backticks must be 2 (if, for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29), the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2,29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "==", together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "=", together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: 'if'
#
# The rule 942511 is related to 942110 which catches a single ' or `
#
# The rule 942510 is similar to this rule, but triggers on backticks
# (`if`). That rule runs in paranoia level 2 or higher since the risk of
# false positives in natural text is still present but lower than this
# rule.
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?:'(?:(?:[\w\s=_\-+{}()<@]){2,29}|(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)')" \
    "id:942511,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQLi bypass attempt by ticks detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"

# Detects ';
# ' Single quote. Used to delineate a query with an unmatched quote.
# ; Terminate a query. A prematurely terminated query creates an error.
# Explanation source:
# https://hwang.cisdept.cpp.edu/swanew/Text/SQL-Injection.htm
#
# Bug Bounty example: email=admin@juice-sh.op';&password=foo
#
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx ';" \
    "id:942530,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'SQLi query termination detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/3',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"


SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 4" "id:942017,phase:1,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
SecRule TX:DETECTION_PARANOIA_LEVEL "@lt 4" "id:942018,phase:2,pass,nolog,skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 4 =- (apply only when tx.detection_paranoia_level is sufficiently high: 4 or higher)
#

#
# [ SQL Injection Character Anomaly Usage ]
#
# This is a stricter sibling of rule 942420.
#

SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){3})" \
    "id:942421,\
    phase:1,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Restricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (3)',\
    logdata:'Matched Data: %{TX.1} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/4',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.warning_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}'"


#
# This is a stricter sibling of rule 942430.
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#

SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){2})" \
    "id:942432,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Restricted SQL Character Anomaly Detection (args): # of special characters exceeded (2)',\
    logdata:'Matched Data: %{TX.1} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\
    tag:'application-multi',\
    tag:'language-multi',\
    tag:'platform-multi',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS',\
    tag:'capec/1000/152/248/66',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/4',\
    ver:'OWASP_CRS/4.0.0-rc1',\
    severity:'WARNING',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.warning_anomaly_score}',\
    setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}'"


#
# -= Paranoia Levels Finished =-
#
SecMarker "END-REQUEST-942-APPLICATION-ATTACK-SQLI"
